#pragma -newline -w 32000
#pragma -comment


% Boo tokens
tokens 
    % Boo string forms - shortstrings are already captured by [stringlit] and [charlit]
    % All may be preceded by a stringprefix, see [stringliteral] below
    longstringlit        "\"\"\"#[(\"\"\")]*\"\"\""
    longcharlit          "'''#[(''')]*'''"

    pointfloat   "\d*.\d+([Ee][+-]?\d+)?f?"        % other forms covered by [floatnumber]
                 | "\d+.\d*([Ee][+-]?\d+)?f?"
                 | "\d+f?"
end tokens

keys 
    and       del       from      'not       while 
    elif      global    or        of
    'assert    else      if        pass      yield 
    break     except    'import    'print 
    class     exec      in        raise     callable
    continue  finally   is        return 
    def       for       lambda    try       @ 
    as        with      namespace elif      struct
    constructor         get       set       pass
end keys

compounds
    == != >= <=
    += -= *= /=
    ++ -- << >>
    **
end compounds

comments
    '#
    '//
end comments

define program
    [class_file]
end define

define class_file
	[opt namespace_stmt] [repeat endofline] [repeat import_stmt_newline] [class_definition+]
end define

define namespace_stmt
	'namespace [id] [opt ';]
end define

define import_stmt_newline
    'import [id_with_dots] [opt ';] [repeat endofline] % FIXME
end define

define class_definition
    [opt attribute_stmt_newline] [opt scope_modifier] 'class [id] [opt generic_type_declaration] [opt derive] [class_body]
end define

define class_body
    [indent] [repeat class_member_newline] [dedent] [repeat endofline]
end define

define struct_definition
    [opt scope_modifier] 'struct [id] [class_body] [repeat endofline]
end define

define derive
    '( [type_base] ')
end define

define class_member_newline
        [opt attribute_stmt_newline] [class_member] [repeat endofline]
    |   [class_definition]
    |   [struct_definition]
end define

define class_member
        [class_member_function_definition]
    |   [class_member_property_definition]
    |   [class_member_variable_declaration]
    |   [callable_declaration]
end define

define class_member_variable_declaration
    [modifier] [variable_declaration] [opt variable_initialization] [opt ';]
end define

define class_member_property_definition
    [modifier] [variable_declaration] [indent] [getter] [opt setter] [dedent]
end define

define getter
    'get [indent] [function_body] [dedent] [repeat endofline]
end define

define setter
    'set [indent] [function_body] [dedent] [repeat endofline]
end define

define class_member_function_definition
    [modifier] [function_header] [indent] [function_body] [dedent]
end define

define callable_declaration
    [opt modifier] 'callable [id] [opt generic_type] '( [variable_declaration,] ') [function_type]
end define

define attribute_stmt_newline
    '[ [_inside_attribute] '] [repeat endofline]
end define

define _inside_attribute
    [function_call] | [leftValue]
end define

define function_header
        'def [id] '( [variable_declaration,] ') [opt function_type]
    |   [constructor_header]
end define

define constructor_header
    'def 'constructor '( [variable_declaration,] ')
end define

define function_body
    [repeat stmt_newline]
end define

define stmt_newline
        [single_stmt] [opt ';] [repeat endofline]
    |   [group_stmt]
end define

define single_stmt
        [function_call]
    |   [assignment_stmt]
    |   [local_variable_definition]
    |   [return_stmt]
    |   [break_stmt]
    |   [yield_stmt]
    |   'pass
end define

define group_stmt
        [if_stmt]
    |   [for_in_stmt]
    |   [while_stmt]
end define

define assignment_stmt
    [leftValue] [assignment_op] [expression]
end define

define local_variable_definition
    [id] as [id] [variable_initialization]
end define

define variable_initialization
    '= [expression]
end define

define return_stmt
    'return [expression]
end define

define yield_stmt
    'yield [expression]
end define

define break_stmt
    'break
end define

define if_stmt
    [if_header] [if_body] [repeat endofline] [opt else_stmt]
end define

define if_header
    'if [expression]
end define

define if_body
        [indent] [repeat stmt_newline] [dedent]
    |   ': [single_stmt]
end define

define else_stmt
        [elif_header] [indent] [repeat stmt_newline] [dedent] [repeat endofline] [opt else_stmt]
    |   'else [if_body] [repeat endofline]
end define

define elif_header
    'elif [expression]
end define

define for_in_stmt
    'for [id] 'in [expression] [indent] [repeat stmt_newline] [dedent] [repeat endofline]
end define

define while_stmt
    [while_header] [indent] [repeat stmt_newline] [dedent] [repeat endofline]
end define

define while_header
    'while [expression]
end define

%

define function_call
    [primary] [opt generic_type] '( [expression,] ')
end define

define variable_declaration
    [id] as [type]
end define

define function_type
    as [type]
end define

define modifier
    [opt 'static] [opt scope_modifier]
end define

define generic_type
    '[ 'of [id_with_dots] ']
end define

define generic_type_declaration
    '[ 'of [id] [derive] ']
end define

define type
        [id_with_dots] [opt generic_type]
    |   [array_type]
end define

define array_type
    '( [type] ')
end define

define type_base
        'class
    |   [id_with_dots]
end define

define scope_modifier
    'public | 'protected | 'private
end define

%

define expression
        [primary]
    |   [expression] [dual_op] [expression]
    |   '- [primary]
    |   'not [primary]
    |   [expression] 'as [id_with_dots]
    |   [expression] 'cast [id_with_dots]
end define

define primary
        [literal]
    |   '( [expression] ')
    |   [primary] '[ [expression] ']
    |   [function_call]
    |   [primary] '. [id]
    |   [id]
end define

define literal
    [number] | [stringlit] | 'true | 'false | [pointfloat] | [arraylit]
end define

define id_with_dots
        [id]
    |   [id] '. [id_with_dots]
end define

define dual_op
        '==
    |   '!=
    |   and
    |   or
    |   '+
    |   '-
    |   '/
    |   '*
    |   '<
    |   '>
    |   '<=
    |   '>=
    |   '>>
    |   '<<
    |   '|
    |   'in
    |   '^
    |   '**
end define

define assignment_op
        '=
    |   '+=
    |   '-=
    |   '*=
    |   '/=
end define

define leftValue
        [id]
    |   [function_call] '. [id]
    |   [leftValue] '. [id]
    |   [leftValue] '[ [expression] ']
end define

define string
        [stringlit] 
    |   [charlit] 
    |   [longstringlit] 
    |   [longcharlit] 
end define

define arraylit
    '( [expression] ', [expression,]')
end define
%

define indent
    ':[endofline] '{ [IN] [repeat endofline]
end define

define dedent
    [EX] '}
end define

define endofline
	[opt comment] [newline]
end define
